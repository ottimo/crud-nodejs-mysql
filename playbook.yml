---
- hosts: build
  vars:
    http_port: 80
    max_clients: 200
    mysql_user: nodejs
    mysql_pass: aosbduaob
    mysql_dbname: crudnodejsmysql
  remote_user: root
  tasks:
  - name: ensure base tools are at the latest version
    package:
      name:
        - nodejs
        - npm
        - git
        - python-pip
        - python-dev
        - python-setuptools
      state: latest
  - name: ensure debs check tools are at the latest version
    npm:
      name: "{{item}}"
      global: yes
      state: latest
    with_items:
      - auditjs
    
  - name: ensure nodejsscan is at the latest version
    pip:
      name: nodejsscan
      state: latest
  - name: clone master branch 
    git:
      repo: 'https://github.com/ottimo/crud-nodejs-mysql.git'
      dest: /srv/app
      clone: yes
      force: yes
      version: master
  - name: check dependencies
    shell: "NODE_ENV=production auditjs -q"
    args:
      chdir: /srv/app
    changed_when: False
    register: known_vulns
  - name: static code analysis
    shell: "nodejsscan -d ./src/ -o output.json"
    args:
      chdir: /srv/app
  - name: ensure build toolchain is at the latest version
    package:
      name:
        - docker
        - docker.io
        - docker-compose
        - python-docker
      state: latest
  - docker_image:
      name: mysql:5
      source: pull
  - docker_network:
      name: TestingNet
  - name: Start db container, connect to network and link
    docker_container:
      name: db
      image: mysql:5
      networks:
        - name: TestingNet
          aliases:
            - db
      volumes:
        - /srv/app/database/db.sql:/tmp/db.sql:ro
      networks_cli_compatible: yes
      env:
        MYSQL_ROOT_PASSWORD: "{{mysql_pass}}"
        MYSQL_USER: "{{mysql_user}}"
        MYSQL_PASSWORD: "{{mysql_pass}}"
        MYSQL_DATABASE: "{{mysql_dbname}}"
    register: docker_db_build
  - wait_for:
      timeout: 10
    when: docker_db_build.changed
  - name: init db inside container
    shell: "docker exec -i db mysql -hlocalhost -uroot -p{{mysql_pass}} < /srv/app/database/db.sql"
  - name: build docker image for web container
    docker_image:
      name: web
      source: build
      tag: latest
      build:
        path: /srv/app
      push: no
      state: present
      force_source: yes
  - docker_container:
      name: check_web
      image: web:latest
      detach: no
      command: npm-check -d
  - docker_container:
      name: web
      image: web:latest
      networks_cli_compatible: yes
      networks:
        - name: TestingNet
          aliases:
            - web
      env:
        NODE_ENV: "production"
        DATABASE_HOST: "db"
        DATABASE_USERNAME: "root"
        DATABASE_PASSWORD: "{{mysql_pass}}"
        DATABASE_NAME: "{{mysql_dbname}}"
        DATABASE_PORT: "3306"
        SESSION_SECRET: "oaisdnoian98aen98aef98n"
  - docker_image:
      name: owasp/zap2docker-weekly
      source: pull
  - name: zap basline scan
    docker_container:
      name: zap-baseline
      image: owasp/zap2docker-weekly
      detach: no
      networks_cli_compatible: yes
      networks:
        - name: TestingNet
      command: zap-baseline.py -t http://web:3000/ -s -I
      
#### Correct build process #####

# start to deploy

# - hosts: db
#   vars:
#     http_port: 80
#     max_clients: 200
#     mysql_user: nodejs
#     mysql_pass: aosbduaob
#     mysql_dbname: crudnodejsmysql
#   remote_user: root
#   tasks:
#   - name: ensure mysql is present
#     package:
#       name:
#         - default-mysql-server
#         - python-mysqldb
#       state: present
#     when: ansible_facts['distribution'] == 'Debian'
#   - mysql_user:
#       name: "{{mysql_user}}"
#       password: "{{mysql_pass}}"
#       state: present
#   - mysql_db:
#       name: "{{mysql_dbname}}"
#       state: import
#       target: /srv/app/database/db.sql